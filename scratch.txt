
add music to the slideshow video
ffmpeg -i abc.mp4 -i abc.mp3 -filter_complex "[1:a]volume=0.15,apad[A];[0:a][A]amerge[out]" -c:v copy -map 0:v -map [out] -y mix.mp4


trimm the end slinece f the music given
ffmpeg -i input.mp3 -af "silenceremove=start_periods=1:start_duration=1:start_threshold=-60dB:detection=peak,aformat=dblp,areverse,silenceremove=start_periods=1:start_duration=1:start_threshold=-60dB:detection=peak,aformat=dblp,areverse" output.flac


loop audi until video finishes
ffmpeg -i inputVideoFilePath -filter_complex "amovie=inputAudioFilePath:loop=0,asetpts=N/SR/TB[aud];[0:a][aud]amix[a]" -map 0:v -map '[a]' -c:v copy -c:a aac -b:a 256k -shortest outputVideoFilePath

example workking
ffmpeg -i music_less.mp4 -filter_complex "amovie=smallmusic.mp3:loop=0,asetpts=N/SR/TB[aud];[0:a][aud]amix[a]" -map 0:v -map '[a]' -c:v copy -c:a aac -b:a 256k -shortest mix.mp4

example with looped music to video and reduced volume worling
ffmpeg -i music_less.mp4 -filter_complex "amovie=smallmusic.mp3:loop=0,asetpts=N/SR/TB,volume=0.15[aud];[0:a][aud]amix[a]" -map 0:v -map '[a]' -c:v copy -c:a aac -b:a 256k -shortest mix.mp4





png overlay with specific blend mode
ffmpeg -n -i abc.mp4 -i over.png -filter_complex "[0:v]setsar=sar=1[v];[v][1]blend=all_mode='overlay':all_opacity=0.7" -movflags +faststart comp.mp4


png overlay centered
ffmpeg -i abc.mp4 -i cov.png -filter_complex "overlay=(main_w-overlay_w)/2:(main_h-overlay_h)/2" -codec:a copy comp.mp4


simple png overlay
ffmpeg -i abc.mp4 -i cov.png -filter_complex "overlay=0:0" -codec:a copy comp.mp4



add subtitle simple
ffmpeg -i FINAL_MSTER.mp4 -vf subtitles=subtitles.srt sub_out.mp4

subtitle font
ffmpeg -i FINAL_MASTER.mp4 -vf "subtitles=subtitles.srt:force_style='Fontsize=24,PrimaryColour=&H0000ff&'" -c:a copy sub_out.mp4

subtitle font custom
ffmpeg -i FINAL_MASTER.mp4 -vf "subtitles=subtitles.srt:force_style='Fontsize=18,FontName=DejaVu Sans,PrimaryColour=&H0000ff&'" -c:a copy sub_out.mp4



working png with subtitles simple

ffmpeg -i FINAL_MASTER.mp4 -i cov.png -filter_complex "[0][1]overlay=10:10,subtitles=subtitles.srt" -c:a copy comp.mp4

working png with custom font and 
ffmpeg -i FINAL_MASTER.mp4 -i cov.png -filter_complex "[0][1]overlay=0:0,subtitles=subtitles.srt:force_style='Fontsize=18,FontName=DejaVu Sans,PrimaryColour=&H0000ff&'" -c:a copy comp.mp4








loop the audio until it finished with video (multivideo) UNUSED
ffmpeg -i vid1.mp4 -i vid2.mp4 -i vid3.mp4 -i audio1.mp3 -filter_complex "[0:v][1:v][2:v]concat=n=3:v=1:a=0,format=yuv420p[v]" -map "[v]" -map 3:a -shortest -movflags +faststart output.mp4



ffmpeg -f concat -safe 0 -i intro.mp4 -i mid.mp4 -i outro.mp4 -c copy pixa.mp4


Concatenation of files with same codecs:

There are two methods within ffmpeg that can be used to concatenate files of the same type: the concat demuxer & the concat protocol

The demuxer is more flexible â€“ it requires the same codecs, but different container formats can be used; and it can be used with any container formats, while the concat protocol only works with a select few containers.

The concat demuxer instructions:

create a text file named vidlist.txt in the following format:

file '/path/to/clip1'
file '/path/to/clip2'
file '/path/to/clip3'

Note that these can be either relative or absolute paths.

Then issue the command:

ffmpeg -f concat -safe 0 -i vidlist.txt -c copy output

In case it's not abundantly clear, replace output with the video filename you wish to produce (whether that be output.mp4, output.mkv, output.avi) ffmpeg will utilize the container indicated by the extension.

The files will be stream copied in the order they appear in the vidlist.txt into the output container. the "copy codec" is blazing fast.

Edit: Note that although the docs say you don't need -safe 0 if the paths are relative, my testing indicates it's a requirement. It's possible that this may vary with your version of ffmpeg.

There are tips for auto generating the file available in the docs.

Note: All the clips must already exist or the command will fail because decoding won't start until the whole list is read.

The concat protocol instructions:

ffmpeg -i "concat:video1.ts|video2.ts|video3.ts" -c copy output.ts

Note: as mentioned above the concat protocol is severely limited in what streams and containers it supports so I never use it. The above is only included in an attempt to create a thorough answer. The concat demuxer is a far better choice for most projects.

An alternative suggestion: Personally I prefer using the Matroska container due to it's flexibility and low overhead and join videos with the same encoding using mkvmerge -o output.mkv input1.mkv + input2.mkv

Concatenation of files with different codecs:

If your clips don't use the same codecs for audio and video and/or have different rates, your stuck re-encoding to intermediate files prior to joining which as we all know is both time and resource consuming.

Note that special characters can break things so if you have these in your filenames you'll need to deal with them.

Sources: Experience




ffmpeg -f concat -safe 0 -i catlist.txt -c copy output.mp4



x-special/nautilus-clipboard
copy
file:///home/anishmohan/PycharmProjects/PerkTest1/welcome.mp3


ffmpeg -i welcome.mp3 -af "equalizer=f=440:width_type=o:width=2:g=-10" voxd.mp3


ffmpeg -i welcome.mp3 -af "equalizer=f=440:width_type=o:width=2:g=-10,equalizer=f=1000:width_type=h:width=200:g=-10" voxd.mp3


